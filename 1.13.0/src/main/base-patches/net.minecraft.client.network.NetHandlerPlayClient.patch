--- net/minecraft/client/network/NetHandlerPlayClient.java
+++ net/minecraft/client/network/NetHandlerPlayClient.java
@@ -277,7 +277,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class NetHandlerPlayClient implements INetHandlerPlayClient {
+public class NetHandlerPlayClient implements INetHandlerPlayClient/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
 	private static final Logger LOGGER = LogManager.getLogger();
 	/**
 	 * The NetworkManager instance used to communicate with the server, used to respond to various packets (primarilly
@@ -755,6 +755,10 @@
 	}
 
 	public void processChunkUnload(SPacketUnloadChunk packetIn) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+		/* <<< WDL */
+
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.world.doPreChunk(packetIn.getX(), packetIn.getZ(), false);
 	}
@@ -778,6 +782,10 @@
 	 * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
 	 */
 	public void onDisconnect(ITextComponent reason) {
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCDisconnect(this, reason);
+		/* <<< WDL */
+
 		this.client.loadWorld((WorldClient)null);
 
 		if (this.guiScreenServer != null) {
@@ -826,6 +834,10 @@
 	public void handleChat(SPacketChat packetIn) {
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.client.ingameGUI.addChatMessage(packetIn.getType(), packetIn.getChatComponent());
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1197,6 +1209,10 @@
 	public void handleBlockAction(SPacketBlockAction packetIn) {
 		PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
 		this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+		/* <<< WDL */
 	}
 
 	/**
@@ -1289,6 +1305,10 @@
 
 		packetIn.setMapdataTo(mapdata);
 		mapitemrenderer.updateMapTexture(mapdata);
+
+		/* WDL >>> */
+		wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+		/* <<< WDL */
 	}
 
 	public void handleEffect(SPacketEffect packetIn) {
@@ -1808,7 +1828,10 @@
 				((DebugRendererWorldGenAttempts)this.client.debugRenderer.worldGenAttempts).addAttempt(packetbuffer.readBlockPos(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat(), packetbuffer.readFloat());
 				LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
 			} else {
-				LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+				/* WDL >>> */
+				wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+				// LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+				/* <<< WDL */
 			}
 		} finally {
 			if (packetbuffer != null) {
