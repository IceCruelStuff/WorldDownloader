--- net/minecraft/client/network/play/ClientPlayNetHandler.java
+++ net/minecraft/client/network/play/ClientPlayNetHandler.java
@@ -294,7 +294,7 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class ClientPlayNetHandler implements IClientPlayNetHandler {
+public class ClientPlayNetHandler implements IClientPlayNetHandler/* WDL >>> */, wdl.ducks.IBaseChangesApplied/* <<< WDL */ {
    private static final Logger LOGGER = LogManager.getLogger();
    private final NetworkManager netManager;
    private final GameProfile profile;
@@ -772,6 +772,10 @@
    }
 
    public void processChunkUnload(SUnloadChunkPacket packetIn) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChunkUnload(this, this.world, packetIn);
+      /* <<< WDL */
+
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       int i = packetIn.getX();
       int j = packetIn.getZ();
@@ -802,6 +806,10 @@
     * Invoked when disconnecting, the parameter is a ChatComponent describing the reason for termination
     */
    public void onDisconnect(ITextComponent reason) {
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCDisconnect(this, reason);
+      /* <<< WDL */
+
       this.client.unloadWorld();
       if (this.guiScreenServer != null) {
          if (this.guiScreenServer instanceof RealmsScreenProxy) {
@@ -850,6 +858,10 @@
    public void handleChat(SChatPacket packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.ingameGUI.addChatMessage(packetIn.getType(), packetIn.getChatComponent());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleChat(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1223,6 +1235,10 @@
    public void handleBlockAction(SBlockActionPacket packetIn) {
       PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.client);
       this.client.world.addBlockEvent(packetIn.getBlockPosition(), packetIn.getBlockType(), packetIn.getData1(), packetIn.getData2());
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleBlockAction(this, packetIn);
+      /* <<< WDL */
    }
 
    /**
@@ -1311,6 +1327,10 @@
 
       packetIn.setMapdataTo(mapdata);
       mapitemrenderer.updateMapTexture(mapdata);
+
+      /* WDL >>> */
+      wdl.WDLHooks.onNHPCHandleMaps(this, packetIn);
+      /* <<< WDL */
    }
 
    public void handleEffect(SPlaySoundEventPacket packetIn) {
@@ -1890,7 +1910,10 @@
 
             this.client.debugRenderer.field_217741_m.func_217692_a(pointofinterestdebugrenderer$braininfo);
          } else {
-            LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* WDL >>> */
+            wdl.WDLHooks.onNHPCHandleCustomPayload(this, packetIn);
+            // LOGGER.warn("Unknown custom packed identifier: {}", (Object)resourcelocation);
+            /* <<< WDL */
          }
       } finally {
          if (packetbuffer != null) {
